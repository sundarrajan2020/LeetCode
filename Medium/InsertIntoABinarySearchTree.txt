You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]

Input: root = [40,20,60,10,30,50,70], val = 25
Output: [40,20,60,10,30,50,70,null,null,25]

Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
Output: [4,2,7,1,3,5]

url: https://leetcode.com/problems/insert-into-a-binary-search-tree/

Solution:

Java:
public TreeNode insertIntoBST(Node root, int val) {
	if (root == null) return new TreeNode(val);
	if (val > root.val) 
		root.right = insertIntoBST(root.right, val);
	else
		root.left = insertIntoBST(root.left, val);
	return root;		
}

Python:
def insertIntoBST(self, root:Optional[TreeNode], val: int) -> Optional	[TreeNode]:
	if root is Node: return TreeNode(val)
	if val > root.val:
		root.right = selft.insertIntoBST(root.right, val)
	else:
		root.left = selft.insertIntoBST(root.left, val)
	return root

